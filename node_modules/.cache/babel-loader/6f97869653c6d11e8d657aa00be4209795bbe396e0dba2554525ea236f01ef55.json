{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var projects=[{title:\"DealMtrx(PE Connection Inc.)\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://www.dealmtrx.com/\",children:\"https://www.dealmtrx.com/\"}),/*#__PURE__*/_jsx(\"br\",{}),\"At the private equity company we are building a software product DealMtrx to simplify the process for Borrowers to grow and manage Lender relationships. As a team member, I am responsible for managing the Front-end part of the product and determine the structure and design of web pages. Building responsive web designs, UI using ReactJS, HTML5 grid layout, CSS3 media queries\"]})},{title:\"Snapeda CAD model\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://shruti-test.herokuapp.com/\",children:\"https://shruti-test.herokuapp.com/\"}),/*#__PURE__*/_jsx(\"br\",{}),\"As a freelancer I developed the front-end for the 'one-for-all' SnapeEDA model to be implemented in their partners' websites via a \",/*#__PURE__*/_jsx(\"script\",{}),\" using Google Tag Manager.\\\\n I developed it in a way that it can be used by any or all future partners' of SnapEDA without any modifications\",/*#__PURE__*/_jsx(\"br\",{}),\"Original SnapEDA website:https://www.snapeda.com/\",/*#__PURE__*/_jsx(\"br\",{}),\"Current partner using this embed:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://www.rs-online.com/designspark/snapeda-parts-finder\",children:\"https://www.rs-online.com/designspark/snapeda-parts-finder\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://www.electronics-lab.com/snapeda-cad-models/?/#/\",children:\"https://www.electronics-lab.com/snapeda-cad-models/?/#/\"})})]})},{title:\"Social Media Website\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://github.com/shrutibakutra/Social-Network\",children:\"https://github.com/shrutibakutra/Social-Network\"}),/*#__PURE__*/_jsx(\"br\",{}),\"A Twitter-like social network website for making posts and following users. The back-end was managed using Django while front-end in JavaScript and HTML. I created APIs for a used to Add, Update and Read posts. In addition to that, a user can like/dislike posts as well as follow/unfollow users.\"]})},{title:\"Burger builder\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://github.com/shrutibakutra/Burger-Builder\",children:\"https://github.com/shrutibakutra/Burger-Builder\"}),/*#__PURE__*/_jsx(\"br\",{}),\"A front-end (ReactJS) for making a burger where a use can choose burgers from the menu, add to cart and make payments. Or, A user can customize their burger by adding ingredients of their own choice and make it even more tasty.\"]})},{title:\"E-Commerce Website\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://github.com/shrutibakutra/Ecommerce\",children:\"https://github.com/shrutibakutra/Ecommerce\"}),/*#__PURE__*/_jsx(\"br\",{}),\"An eBay-like e-commerce auction site that will allow users to post auction listings, place bids on listings, comment on those listings, and add listings to a \\u201Cwatchlist\\\". This project was built using Django for backend and HTML for front-end. Data was managed in Django's inbuilt database,SQLite3.\"]})},{title:\"Email Client\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://github.com/shrutibakutra/Email-Client\",children:\"https://github.com/shrutibakutra/Email-Client\"}),/*#__PURE__*/_jsx(\"br\",{}),\"A front-end for an email client that makes API calls to send and receive emails. In this project, back-end was handled using Django while front-end in JavaScript and HTML. I created APIs for user to Send, Receive and  Archieve emails.\"]})},{title:\"Crud Operations\",description:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"a\",{className:\"mywork__table__url\",href:\"https://github.com/shrutibakutra/crispy-dollop\",children:\"https://github.com/shrutibakutra/crispy-dollop\"}),/*#__PURE__*/_jsx(\"br\",{}),\"In this project I did CRUD operation using ReactJS in frond-end and NodeJS in back-end to manage data of different companies and their employees.I joined two tables using lookup to store data in require manner in mongoDB.\"]})}];export default projects;","map":{"version":3,"names":["projects","title","description","_jsxs","children","_jsx","className","href"],"sources":["/Users/shruti/Documents/personal/src/projects.js"],"sourcesContent":["const projects =\n    [{\n        title: \"DealMtrx(PE Connection Inc.)\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://www.dealmtrx.com/\">https://www.dealmtrx.com/</a>\n            <br/>\n            At the private equity company we are building a software product DealMtrx to \n            simplify the process for Borrowers to grow and manage Lender relationships. \n            As a team member, I am responsible for managing the Front-end part of the product \n            and determine the structure and design of web pages. Building responsive web designs, \n            UI using ReactJS, HTML5 grid layout, CSS3 media queries\n            </div>\n    },\n    {\n        title: \"Snapeda CAD model\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://shruti-test.herokuapp.com/\">https://shruti-test.herokuapp.com/</a>\n            <br />As a freelancer I developed the front-end for the 'one-for-all' SnapeEDA model to be implemented in their partners'\n            websites via a <script /> using Google Tag Manager.\\n I developed it in a way that\n            it can be used by any or all future partners' of SnapEDA without any modifications\n            <br />Original SnapEDA website:https://www.snapeda.com/<br />\n            Current partner using this embed:<br />\n            <li>\n                <a className=\"mywork__table__url\" href=\"https://www.rs-online.com/designspark/snapeda-parts-finder\">\n                    https://www.rs-online.com/designspark/snapeda-parts-finder\n                </a>\n            </li>\n            <li>\n                <a className=\"mywork__table__url\" href=\"https://www.electronics-lab.com/snapeda-cad-models/?/#/\">\n                    https://www.electronics-lab.com/snapeda-cad-models/?/#/\n                </a>\n            </li>\n        </div>\n    },\n    {\n        title: \"Social Media Website\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://github.com/shrutibakutra/Social-Network\">https://github.com/shrutibakutra/Social-Network</a>\n            <br />\n            A Twitter-like social network website for making posts and following users.\n            The back-end was managed using Django while front-end in JavaScript and HTML. I created APIs for a used to Add, Update and Read posts.\n            In addition to that, a user can like/dislike posts as well as follow/unfollow users.\n        </div>\n    },\n    \n    {\n        title: \"Burger builder\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://github.com/shrutibakutra/Burger-Builder\">https://github.com/shrutibakutra/Burger-Builder</a>\n            <br />\n            A front-end (ReactJS) for making a burger where a use can choose burgers from the menu, add to cart and make payments. Or, A user can customize their burger by adding ingredients of their own choice and make it even more tasty.\n        </div>\n    },\n    {\n        title: \"E-Commerce Website\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://github.com/shrutibakutra/Ecommerce\">\n                https://github.com/shrutibakutra/Ecommerce\n            </a>\n            <br />\n            An eBay-like e-commerce auction site that will allow users to post auction listings,\n            place bids on listings, comment on those listings, and add listings to a â€œwatchlist\".\n            This project was built using Django for backend and HTML for front-end. Data was managed in Django's inbuilt database,SQLite3.\n        </div>\n    },\n    {\n        title: \"Email Client\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://github.com/shrutibakutra/Email-Client\">\n                https://github.com/shrutibakutra/Email-Client\n            </a>\n            <br />\n            A front-end for an email client that makes API calls to send and receive emails.\n            In this project, back-end was handled using Django while front-end in JavaScript and HTML.\n            I created APIs for user to Send, Receive and  Archieve emails.\n        </div>\n    },\n    {\n        title: \"Crud Operations\",\n        description: <div>\n            <a className=\"mywork__table__url\" href=\"https://github.com/shrutibakutra/crispy-dollop\">\n                https://github.com/shrutibakutra/crispy-dollop\n            </a>\n            <br />\n            In this project I did CRUD operation using ReactJS in frond-end and NodeJS in back-end to manage\n            data of different companies and their employees.I joined two tables using lookup to store data in\n            require manner in mongoDB.\n        </div>\n    }\n    ]\nexport default projects;"],"mappings":"wFAAA,GAAM,CAAAA,QAAQ,CACV,CAAC,CACGC,KAAK,CAAE,8BAA8B,CACrCC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,2BAA2B,CAAAH,QAAA,CAAC,2BAAyB,EAAI,cAChGC,IAAA,SAAK,2XAML,GACR,CAAC,CACD,CACIJ,KAAK,CAAE,mBAAmB,CAC1BC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,oCAAoC,CAAAH,QAAA,CAAC,oCAAkC,EAAI,cAClHC,IAAA,SAAM,sIACS,cAAAA,IAAA,aAAU,gJAEzB,cAAAA,IAAA,SAAM,oDAAiD,cAAAA,IAAA,SAAM,oCAC5B,cAAAA,IAAA,SAAM,cACvCA,IAAA,OAAAD,QAAA,cACIC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,4DAA4D,CAAAH,QAAA,CAAC,4DAEpG,EAAI,EACH,cACLC,IAAA,OAAAD,QAAA,cACIC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,yDAAyD,CAAAH,QAAA,CAAC,yDAEjG,EAAI,EACH,GAEb,CAAC,CACD,CACIH,KAAK,CAAE,sBAAsB,CAC7BC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,iDAAiD,CAAAH,QAAA,CAAC,iDAA+C,EAAI,cAC5IC,IAAA,SAAM,0SAIV,GACJ,CAAC,CAED,CACIJ,KAAK,CAAE,gBAAgB,CACvBC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,iDAAiD,CAAAH,QAAA,CAAC,iDAA+C,EAAI,cAC5IC,IAAA,SAAM,sOAEV,GACJ,CAAC,CACD,CACIJ,KAAK,CAAE,oBAAoB,CAC3BC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,4CAA4C,CAAAH,QAAA,CAAC,4CAEpF,EAAI,cACJC,IAAA,SAAM,kTAIV,GACJ,CAAC,CACD,CACIJ,KAAK,CAAE,cAAc,CACrBC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,+CAA+C,CAAAH,QAAA,CAAC,+CAEvF,EAAI,cACJC,IAAA,SAAM,6OAIV,GACJ,CAAC,CACD,CACIJ,KAAK,CAAE,iBAAiB,CACxBC,WAAW,cAAEC,KAAA,QAAAC,QAAA,eACTC,IAAA,MAAGC,SAAS,CAAC,oBAAoB,CAACC,IAAI,CAAC,gDAAgD,CAAAH,QAAA,CAAC,gDAExF,EAAI,cACJC,IAAA,SAAM,gOAIV,GACJ,CAAC,CACA,CACL,cAAe,CAAAL,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}